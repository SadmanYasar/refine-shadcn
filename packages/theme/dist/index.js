"use strict";var e,r=Object.create,a=Object.defineProperty,t=Object.getOwnPropertyDescriptor,s=Object.getOwnPropertyNames,i=Object.getPrototypeOf,l=Object.prototype.hasOwnProperty,o=(e,r)=>a(e,"name",{value:r,configurable:!0}),n=(e,r)=>{for(var t in r)a(e,t,{get:r[t],enumerable:!0})},d=(e,r,i,o)=>{if(r&&"object"==typeof r||"function"==typeof r)for(let n of s(r))!l.call(e,n)&&n!==i&&a(e,n,{get:()=>r[n],enumerable:!(o=t(r,n))||o.enumerable});return e},c=(e,t,s)=>(s=null!=e?r(i(e)):{},d(!t&&e&&e.__esModule?s:a(s,"default",{value:e,enumerable:!0}),e)),u={};n(u,{Breadcrumbs:()=>re,CloneButton:()=>R,Combobox:()=>nt,ConfirmDialog:()=>mt,CreateButton:()=>z,CreatePage:()=>ps,DefaultLayout:()=>Vs,DeleteActionModal:()=>li,DeleteButton:()=>Ft,DeleteContext:()=>oi,DeleteProvider:()=>ni,EditButton:()=>Mt,EditPage:()=>bs,ExportButton:()=>Ht,Field:()=>pt,Form:()=>bt,ImportButton:()=>Wt,Link:()=>K,ListButton:()=>Kt,ListPage:()=>ws,ModeToggle:()=>yt,PageHeader:()=>Ct,RefreshButton:()=>as,SaveButton:()=>os,Select:()=>kt,ShowButton:()=>us,ShowPage:()=>Ds,Sidebar:()=>zt,Table:()=>tl,UI:()=>te,notificationProvider:()=>Gs,useNotificationProvider:()=>Us}),module.exports=(e=u,d(a({},"__esModule",{value:!0}),e));var m=require("@radix-ui/react-slot"),x=require("class-variance-authority"),f=c(require("react")),p=require("clsx"),h=require("tailwind-merge");function g(...e){return(0,h.twMerge)((0,p.clsx)(e))}o(g,"cn");var j=require("lucide-react"),b=c(require("react")),v=require("react/jsx-runtime"),N=b.default.forwardRef((({className:e,...r},a)=>(0,v.jsx)(j.RefreshCwIcon,{ref:a,className:g("h-4 w-4 animate-spin",e),...r}))),y=require("react/jsx-runtime"),w=(0,x.cva)("inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",{variants:{variant:{default:"bg-primary text-primary-foreground shadow hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",outline:"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",secondary:"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"},size:{default:"h-9 px-4 py-2",sm:"h-8 rounded-md px-3 text-xs",lg:"h-10 rounded-md px-8",icon:"h-9 w-9"}},defaultVariants:{variant:"default",size:"default"}}),C=f.forwardRef((({className:e,variant:r,size:a,icon:t=null,loading:s=!1,asChild:i=!1,children:l,disabled:o,...n},d)=>{o=o||s;let c=f.useMemo((()=>f.isValidElement(t)?t:s?(0,y.jsx)(N,{className:"mr-2"}):null),[t,s]);return(0,y.jsx)(i?m.Slot:"button",{className:g(w({variant:r,size:a,className:e})),ref:d,disabled:o,...n,children:"icon"===a?s?(0,y.jsx)(N,{}):l:(0,y.jsxs)(y.Fragment,{children:[c,l]})})}));C.displayName="Button";var q=require("@refinedev/core"),S=require("lucide-react"),k=require("react/jsx-runtime"),R=o((({resource:e,recordItemId:r,hideText:a=!1,accessControl:t,meta:s,onClick:i,children:l,...o})=>{let{to:n,LinkComponent:d,label:c,disabled:u,hidden:m,title:x}=(0,q.useCloneButton)({id:r,resource:e,accessControl:t,meta:s});return m?null:(0,k.jsx)(d,{to:n,replace:!1,onClick:e=>{u?e.preventDefault():i&&(e.preventDefault(),i(e))},children:(0,k.jsx)(C,{disabled:u,title:x,icon:(0,k.jsx)(S.CopyPlus,{className:"mr-2 w-4 h-4"}),...o,children:!a&&(l??c)})})}),"CloneButton");R.displayName="CloneButton";var D=require("@refinedev/core"),I=require("lucide-react"),T=require("react/jsx-runtime"),z=o((({resource:e,hideText:r=!1,accessControl:a,meta:t,onClick:s,children:i,...l})=>{let{hidden:o,disabled:n,label:d,title:c,LinkComponent:u,to:m}=(0,D.useCreateButton)({resource:e,accessControl:a,meta:t});return o?null:(0,T.jsx)(u,{to:m,replace:!1,onClick:e=>{n?e.preventDefault():s&&(e.preventDefault(),s(e))},children:(0,T.jsx)(C,{disabled:n,title:c,icon:(0,T.jsx)(I.SquarePlusIcon,{className:"mr-2 w-4 h-4"}),...l,children:!r&&(i??d)})})}),"CreateButton");z.displayName="CreateButton";var B=require("@refinedev/core"),F=require("lucide-react"),P=c(require("react")),L=require("@radix-ui/react-icons"),A=require("@radix-ui/react-slot"),M=require("react/jsx-runtime"),O=P.forwardRef((({...e},r)=>(0,M.jsx)("nav",{ref:r,"aria-label":"breadcrumb",...e})));O.displayName="Breadcrumb";var _=P.forwardRef((({className:e,...r},a)=>(0,M.jsx)("ol",{ref:a,className:g("flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",e),...r})));_.displayName="BreadcrumbList";var E=P.forwardRef((({className:e,...r},a)=>(0,M.jsx)("li",{ref:a,className:g("inline-flex items-center gap-1.5",e),...r})));E.displayName="BreadcrumbItem";var V=P.forwardRef((({asChild:e,className:r,...a},t)=>(0,M.jsx)(e?A.Slot:"a",{ref:t,className:g("transition-colors hover:text-foreground",r),...a})));V.displayName="BreadcrumbLink";var H=P.forwardRef((({className:e,...r},a)=>(0,M.jsx)("span",{ref:a,role:"link","aria-disabled":"true","aria-current":"page",className:g("font-normal text-foreground",e),...r})));H.displayName="BreadcrumbPage";var G=o((({children:e,className:r,...a})=>(0,M.jsx)("li",{role:"presentation","aria-hidden":"true",className:g("[&>svg]:size-3.5",r),...a,children:e??(0,M.jsx)(L.ChevronRightIcon,{})})),"BreadcrumbSeparator");G.displayName="BreadcrumbSeparator";var U=o((({className:e,...r})=>(0,M.jsxs)("span",{role:"presentation","aria-hidden":"true",className:g("flex h-9 w-9 items-center justify-center",e),...r,children:[(0,M.jsx)(L.DotsHorizontalIcon,{className:"h-4 w-4"}),(0,M.jsx)("span",{className:"sr-only",children:"More"})]})),"BreadcrumbEllipsis");U.displayName="BreadcrumbElipssis";var $=require("@refinedev/core"),Q=require("react"),W=require("@radix-ui/react-slot"),X=require("@refinedev/core"),J=require("react"),Y=require("react/jsx-runtime"),K=(0,J.forwardRef)((({children:e,href:r,title:a,className:t,asChild:s},i)=>{let{Link:l}=(0,X.useRouterContext)(),o=(0,X.useRouterType)(),n=(0,X.useLink)();return(0,Y.jsx)(s?W.Slot:"legacy"===o?l:n,{ref:i,to:r,className:t,title:a,children:e})}));K.displayName="Link";var Z=require("lucide-react"),ee=require("react/jsx-runtime"),re=o((({showHome:e=!0,meta:r})=>{let{breadcrumbs:a}=(0,$.useBreadcrumb)({meta:r}),{hasDashboard:t}=(0,$.useRefineContext)(),{resources:s}=(0,$.useResource)(),i=s[0],l=(0,$.matchResourceFromRoute)("/",s),o=a.map((({label:e,href:r},t)=>(0,ee.jsxs)(Q.Fragment,{children:[(0,ee.jsx)(E,{children:r?(0,ee.jsx)(V,{asChild:!0,href:"#x",children:(0,ee.jsx)(K,{href:r,children:e})}):(0,ee.jsx)(H,{children:e})}),t<a.length-1&&(0,ee.jsx)(G,{})]},t)));return(0,ee.jsx)(O,{children:(0,ee.jsxs)(_,{children:[e||t||l.found?(0,ee.jsxs)(ee.Fragment,{children:[(0,ee.jsx)(E,{children:(0,ee.jsx)(V,{href:i.list?.toString(),asChild:!0,title:i?.meta?.title??i.name??"Dashboard",children:(0,ee.jsx)(K,{href:i.list?.toString(),title:i?.meta?.title??i.name??"Dashboard",children:i?.meta?.icon??(0,ee.jsx)(Z.HomeIcon,{className:"h-4 w-4"})})})}),(0,ee.jsx)(G,{})]}):null,o]})})}),"Breadcrumbs"),ae=require("@radix-ui/react-icons"),te={};n(te,{AlertDialog:()=>oe,AlertDialogAction:()=>he,AlertDialogCancel:()=>ge,AlertDialogContent:()=>ue,AlertDialogDescription:()=>pe,AlertDialogFooter:()=>xe,AlertDialogHeader:()=>me,AlertDialogOverlay:()=>ce,AlertDialogPortal:()=>de,AlertDialogTitle:()=>fe,AlertDialogTrigger:()=>ne,Badge:()=>Ne,Breadcrumb:()=>O,BreadcrumbEllipsis:()=>U,BreadcrumbItem:()=>E,BreadcrumbLink:()=>V,BreadcrumbList:()=>_,BreadcrumbPage:()=>H,BreadcrumbSeparator:()=>G,Button:()=>C,Calendar:()=>qe,Card:()=>Re,CardContent:()=>ze,CardDescription:()=>Te,CardFooter:()=>Be,CardHeader:()=>De,CardTitle:()=>Ie,Checkbox:()=>Me,Command:()=>tr,CommandDialog:()=>sr,CommandEmpty:()=>or,CommandGroup:()=>nr,CommandInput:()=>ir,CommandItem:()=>cr,CommandList:()=>lr,CommandSeparator:()=>dr,CommandShortcut:()=>ur,Dialog:()=>$e,DialogClose:()=>Xe,DialogContent:()=>Ye,DialogDescription:()=>rr,DialogFooter:()=>Ze,DialogHeader:()=>Ke,DialogOverlay:()=>Je,DialogPortal:()=>We,DialogTitle:()=>er,DialogTrigger:()=>Qe,DropdownMenu:()=>hr,DropdownMenuCheckboxItem:()=>Sr,DropdownMenuContent:()=>Cr,DropdownMenuGroup:()=>jr,DropdownMenuItem:()=>qr,DropdownMenuLabel:()=>Rr,DropdownMenuPortal:()=>br,DropdownMenuRadioGroup:()=>Nr,DropdownMenuRadioItem:()=>kr,DropdownMenuSeparator:()=>Dr,DropdownMenuShortcut:()=>Ir,DropdownMenuSub:()=>vr,DropdownMenuSubContent:()=>wr,DropdownMenuSubTrigger:()=>yr,DropdownMenuTrigger:()=>gr,Form:()=>Er,FormControl:()=>Wr,FormDescription:()=>Xr,FormField:()=>Hr,FormItem:()=>$r,FormLabel:()=>Qr,FormMessage:()=>Jr,Input:()=>Zr,Label:()=>Or,LoadingIcon:()=>N,Popover:()=>ta,PopoverAnchor:()=>ia,PopoverContent:()=>la,PopoverTrigger:()=>sa,ResizableHandle:()=>ma,ResizablePanel:()=>ua,ResizablePanelGroup:()=>ca,ScrollArea:()=>ha,ScrollBar:()=>ga,Select:()=>ya,SelectContent:()=>Ra,SelectGroup:()=>wa,SelectItem:()=>Ia,SelectLabel:()=>Da,SelectScrollDownButton:()=>ka,SelectScrollUpButton:()=>Sa,SelectSeparator:()=>Ta,SelectTrigger:()=>qa,SelectValue:()=>Ca,Separator:()=>Pa,Table:()=>Va,TableBody:()=>Ga,TableCaption:()=>Xa,TableCell:()=>Wa,TableFooter:()=>Ua,TableHead:()=>Qa,TableHeader:()=>Ha,TableRow:()=>$a,Textarea:()=>Ka,Toaster:()=>Oa,Tooltip:()=>tt,TooltipContent:()=>it,TooltipProvider:()=>at,TooltipTrigger:()=>st,badgeVariants:()=>ve,buttonVariants:()=>w,useFormField:()=>Gr});var se=c(require("@radix-ui/react-alert-dialog")),ie=c(require("react")),le=require("react/jsx-runtime"),oe=se.Root,ne=se.Trigger,de=se.Portal,ce=ie.forwardRef((({className:e,...r},a)=>(0,le.jsx)(se.Overlay,{className:g("fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",e),...r,ref:a})));ce.displayName=se.Overlay.displayName;var ue=ie.forwardRef((({className:e,...r},a)=>(0,le.jsxs)(de,{children:[(0,le.jsx)(ce,{}),(0,le.jsx)(se.Content,{ref:a,className:g("fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",e),...r})]})));ue.displayName=se.Content.displayName;var me=o((({className:e,...r})=>(0,le.jsx)("div",{className:g("flex flex-col space-y-2 text-center sm:text-left",e),...r})),"AlertDialogHeader");me.displayName="AlertDialogHeader";var xe=o((({className:e,...r})=>(0,le.jsx)("div",{className:g("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",e),...r})),"AlertDialogFooter");xe.displayName="AlertDialogFooter";var fe=ie.forwardRef((({className:e,...r},a)=>(0,le.jsx)(se.Title,{ref:a,className:g("text-lg font-semibold",e),...r})));fe.displayName=se.Title.displayName;var pe=ie.forwardRef((({className:e,...r},a)=>(0,le.jsx)(se.Description,{ref:a,className:g("text-sm text-muted-foreground",e),...r})));pe.displayName=se.Description.displayName;var he=ie.forwardRef((({className:e,variant:r="default",size:a="default",...t},s)=>(0,le.jsx)(se.Action,{ref:s,className:g(w({variant:r,size:a}),e),...t})));he.displayName=se.Action.displayName;var ge=ie.forwardRef((({className:e,variant:r="outline",size:a="default",...t},s)=>(0,le.jsx)(se.Cancel,{ref:s,className:g(w({variant:r,size:a}),"mt-2 sm:mt-0",e),...t})));ge.displayName=se.Cancel.displayName;var je=require("class-variance-authority"),be=require("react/jsx-runtime"),ve=(0,je.cva)("inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",{variants:{variant:{default:"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",secondary:"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",destructive:"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",outline:"text-foreground"}},defaultVariants:{variant:"default"}});function Ne({className:e,variant:r,...a}){return(0,be.jsx)("div",{className:g(ve({variant:r}),e),...a})}o(Ne,"Badge");var ye=require("@radix-ui/react-icons"),we=require("react-day-picker"),Ce=require("react/jsx-runtime");function qe({className:e,classNames:r,showOutsideDays:a=!0,...t}){return(0,Ce.jsx)(we.DayPicker,{showOutsideDays:a,className:g("p-3",e),classNames:{months:"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",month:"space-y-4",caption:"flex justify-center pt-1 relative items-center",caption_label:"text-sm font-medium",nav:"space-x-1 flex items-center",nav_button:g(w({variant:"outline"}),"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"),nav_button_previous:"absolute left-1",nav_button_next:"absolute right-1",table:"w-full border-collapse space-y-1",head_row:"flex",head_cell:"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",row:"flex w-full mt-2",cell:g("relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md","range"===t.mode?"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md":"[&:has([aria-selected])]:rounded-md"),day:g(w({variant:"ghost"}),"h-8 w-8 p-0 font-normal aria-selected:opacity-100"),day_range_start:"day-range-start",day_range_end:"day-range-end",day_selected:"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",day_today:"bg-accent text-accent-foreground",day_outside:"day-outside text-muted-foreground opacity-50  aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",day_disabled:"text-muted-foreground opacity-50",day_range_middle:"aria-selected:bg-accent aria-selected:text-accent-foreground",day_hidden:"invisible",...r},components:{IconLeft:o((()=>(0,Ce.jsx)(ye.ChevronLeftIcon,{className:"h-4 w-4"})),"IconLeft"),IconRight:o((()=>(0,Ce.jsx)(ye.ChevronRightIcon,{className:"h-4 w-4"})),"IconRight")},...t})}o(qe,"Calendar"),qe.displayName="Calendar";var Se=c(require("react")),ke=require("react/jsx-runtime"),Re=Se.forwardRef((({className:e,...r},a)=>(0,ke.jsx)("div",{ref:a,className:g("rounded-xl border bg-card text-card-foreground shadow",e),...r})));Re.displayName="Card";var De=Se.forwardRef((({className:e,...r},a)=>(0,ke.jsx)("div",{ref:a,className:g("flex flex-col space-y-1.5 p-6",e),...r})));De.displayName="CardHeader";var Ie=Se.forwardRef((({className:e,...r},a)=>(0,ke.jsx)("h3",{ref:a,className:g("font-semibold leading-none tracking-tight",e),...r})));Ie.displayName="CardTitle";var Te=Se.forwardRef((({className:e,...r},a)=>(0,ke.jsx)("p",{ref:a,className:g("text-sm text-muted-foreground",e),...r})));Te.displayName="CardDescription";var ze=Se.forwardRef((({className:e,...r},a)=>(0,ke.jsx)("div",{ref:a,className:g("p-6 pt-0",e),...r})));ze.displayName="CardContent";var Be=Se.forwardRef((({className:e,...r},a)=>(0,ke.jsx)("div",{ref:a,className:g("flex items-center p-6 pt-0",e),...r})));Be.displayName="CardFooter";var Fe=c(require("react")),Pe=c(require("@radix-ui/react-checkbox")),Le=require("@radix-ui/react-icons"),Ae=require("react/jsx-runtime"),Me=Fe.forwardRef((({className:e,...r},a)=>(0,Ae.jsx)(Pe.Root,{ref:a,className:g("peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",e),...r,children:(0,Ae.jsx)(Pe.Indicator,{className:g("flex items-center justify-center text-current"),children:(0,Ae.jsx)(Le.CheckIcon,{className:"h-4 w-4"})})})));Me.displayName=Pe.Root.displayName;var Oe=c(require("react")),_e=require("@radix-ui/react-icons"),Ee=require("cmdk"),Ve=c(require("react")),He=c(require("@radix-ui/react-dialog")),Ge=require("@radix-ui/react-icons"),Ue=require("react/jsx-runtime"),$e=He.Root,Qe=He.Trigger,We=He.Portal,Xe=He.Close,Je=Ve.forwardRef((({className:e,...r},a)=>(0,Ue.jsx)(He.Overlay,{ref:a,className:g("fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",e),...r})));Je.displayName=He.Overlay.displayName;var Ye=Ve.forwardRef((({className:e,children:r,...a},t)=>(0,Ue.jsxs)(We,{children:[(0,Ue.jsx)(Je,{}),(0,Ue.jsxs)(He.Content,{ref:t,className:g("fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",e),...a,children:[r,(0,Ue.jsxs)(He.Close,{className:"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground",children:[(0,Ue.jsx)(Ge.Cross2Icon,{className:"h-4 w-4"}),(0,Ue.jsx)("span",{className:"sr-only",children:"Close"})]})]})]})));Ye.displayName=He.Content.displayName;var Ke=o((({className:e,...r})=>(0,Ue.jsx)("div",{className:g("flex flex-col space-y-1.5 text-center sm:text-left",e),...r})),"DialogHeader");Ke.displayName="DialogHeader";var Ze=o((({className:e,...r})=>(0,Ue.jsx)("div",{className:g("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",e),...r})),"DialogFooter");Ze.displayName="DialogFooter";var er=Ve.forwardRef((({className:e,...r},a)=>(0,Ue.jsx)(He.Title,{ref:a,className:g("text-lg font-semibold leading-none tracking-tight",e),...r})));er.displayName=He.Title.displayName;var rr=Ve.forwardRef((({className:e,...r},a)=>(0,Ue.jsx)(He.Description,{ref:a,className:g("text-sm text-muted-foreground",e),...r})));rr.displayName=He.Description.displayName;var ar=require("react/jsx-runtime"),tr=Oe.forwardRef((({className:e,...r},a)=>(0,ar.jsx)(Ee.Command,{ref:a,className:g("flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",e),...r})));tr.displayName=Ee.Command.displayName;var sr=o((({children:e,...r})=>(0,ar.jsx)($e,{...r,children:(0,ar.jsx)(Ye,{className:"overflow-hidden p-0",children:(0,ar.jsx)(tr,{className:"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5",children:e})})})),"CommandDialog"),ir=Oe.forwardRef((({className:e,...r},a)=>(0,ar.jsxs)("div",{className:"flex items-center border-b px-3","cmdk-input-wrapper":"",children:[(0,ar.jsx)(_e.MagnifyingGlassIcon,{className:"mr-2 h-4 w-4 shrink-0 opacity-50"}),(0,ar.jsx)(Ee.Command.Input,{ref:a,className:g("flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",e),...r})]})));ir.displayName=Ee.Command.Input.displayName;var lr=Oe.forwardRef((({className:e,...r},a)=>(0,ar.jsx)(Ee.Command.List,{ref:a,className:g("max-h-[300px] overflow-y-auto overflow-x-hidden",e),...r})));lr.displayName=Ee.Command.List.displayName;var or=Oe.forwardRef(((e,r)=>(0,ar.jsx)(Ee.Command.Empty,{ref:r,className:"py-6 text-center text-sm",...e})));or.displayName=Ee.Command.Empty.displayName;var nr=Oe.forwardRef((({className:e,...r},a)=>(0,ar.jsx)(Ee.Command.Group,{ref:a,className:g("overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",e),...r})));nr.displayName=Ee.Command.Group.displayName;var dr=Oe.forwardRef((({className:e,...r},a)=>(0,ar.jsx)(Ee.Command.Separator,{ref:a,className:g("-mx-1 h-px bg-border",e),...r})));dr.displayName=Ee.Command.Separator.displayName;var cr=Oe.forwardRef((({className:e,...r},a)=>(0,ar.jsx)(Ee.Command.Item,{ref:a,className:g("relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",e),...r})));cr.displayName=Ee.Command.Item.displayName;var ur=o((({className:e,...r})=>(0,ar.jsx)("span",{className:g("ml-auto text-xs tracking-widest text-muted-foreground",e),...r})),"CommandShortcut");ur.displayName="CommandShortcut";var mr=c(require("react")),xr=c(require("@radix-ui/react-dropdown-menu")),fr=require("@radix-ui/react-icons"),pr=require("react/jsx-runtime"),hr=xr.Root,gr=xr.Trigger,jr=xr.Group,br=xr.Portal,vr=xr.Sub,Nr=xr.RadioGroup,yr=mr.forwardRef((({className:e,inset:r,children:a,...t},s)=>(0,pr.jsxs)(xr.SubTrigger,{ref:s,className:g("flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",r&&"pl-8",e),...t,children:[a,(0,pr.jsx)(fr.ChevronRightIcon,{className:"ml-auto h-4 w-4"})]})));yr.displayName=xr.SubTrigger.displayName;var wr=mr.forwardRef((({className:e,...r},a)=>(0,pr.jsx)(xr.SubContent,{ref:a,className:g("z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",e),...r})));wr.displayName=xr.SubContent.displayName;var Cr=mr.forwardRef((({className:e,sideOffset:r=4,...a},t)=>(0,pr.jsx)(xr.Portal,{children:(0,pr.jsx)(xr.Content,{ref:t,sideOffset:r,className:g("z-50 min-w-[8rem] overflow-hidden rounded-md border border-border bg-popover p-1 text-popover-foreground shadow-md","data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",e),...a})})));Cr.displayName=xr.Content.displayName;var qr=mr.forwardRef((({className:e,inset:r,...a},t)=>(0,pr.jsx)(xr.Item,{ref:t,className:g("relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",r&&"pl-8",e),...a})));qr.displayName=xr.Item.displayName;var Sr=mr.forwardRef((({className:e,children:r,checked:a,...t},s)=>(0,pr.jsxs)(xr.CheckboxItem,{ref:s,className:g("relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",e),checked:a,...t,children:[(0,pr.jsx)("span",{className:"absolute left-2 flex h-3.5 w-3.5 items-center justify-center",children:(0,pr.jsx)(xr.ItemIndicator,{children:(0,pr.jsx)(fr.CheckIcon,{className:"h-4 w-4"})})}),r]})));Sr.displayName=xr.CheckboxItem.displayName;var kr=mr.forwardRef((({className:e,children:r,...a},t)=>(0,pr.jsxs)(xr.RadioItem,{ref:t,className:g("relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",e),...a,children:[(0,pr.jsx)("span",{className:"absolute left-2 flex h-3.5 w-3.5 items-center justify-center",children:(0,pr.jsx)(xr.ItemIndicator,{children:(0,pr.jsx)(fr.DotFilledIcon,{className:"h-4 w-4 fill-current"})})}),r]})));kr.displayName=xr.RadioItem.displayName;var Rr=mr.forwardRef((({className:e,inset:r,...a},t)=>(0,pr.jsx)(xr.Label,{ref:t,className:g("px-2 py-1.5 text-sm font-semibold",r&&"pl-8",e),...a})));Rr.displayName=xr.Label.displayName;var Dr=mr.forwardRef((({className:e,...r},a)=>(0,pr.jsx)(xr.Separator,{ref:a,className:g("-mx-1 my-1 h-px bg-muted",e),...r})));Dr.displayName=xr.Separator.displayName;var Ir=o((({className:e,...r})=>(0,pr.jsx)("span",{className:g("ml-auto text-xs tracking-widest opacity-60",e),...r})),"DropdownMenuShortcut");Ir.displayName="DropdownMenuShortcut";var Tr=c(require("react")),zr=require("@radix-ui/react-slot"),Br=require("react-hook-form"),Fr=c(require("react")),Pr=c(require("@radix-ui/react-label")),Lr=require("class-variance-authority"),Ar=require("react/jsx-runtime"),Mr=(0,Lr.cva)("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"),Or=Fr.forwardRef((({className:e,...r},a)=>(0,Ar.jsx)(Pr.Root,{ref:a,className:g(Mr(),e),...r})));Or.displayName=Pr.Root.displayName;var _r=require("react/jsx-runtime"),Er=Br.FormProvider,Vr=Tr.createContext({}),Hr=o((({...e})=>(0,_r.jsx)(Vr.Provider,{value:{name:e.name},children:(0,_r.jsx)(Br.Controller,{...e})})),"FormField"),Gr=o((()=>{let e=Tr.useContext(Vr),r=Tr.useContext(Ur),{getFieldState:a,formState:t}=(0,Br.useFormContext)(),s=a(e.name,t);if(!e)throw new Error("useFormField should be used within <FormField>");let{id:i}=r;return{id:i,name:e.name,formItemId:`${i}-form-item`,formDescriptionId:`${i}-form-item-description`,formMessageId:`${i}-form-item-message`,...s}}),"useFormField"),Ur=Tr.createContext({}),$r=Tr.forwardRef((({className:e,...r},a)=>{let t=Tr.useId();return(0,_r.jsx)(Ur.Provider,{value:{id:t},children:(0,_r.jsx)("div",{ref:a,className:g("space-y-2",e),...r})})}));$r.displayName="FormItem";var Qr=Tr.forwardRef((({className:e,...r},a)=>{let{error:t,formItemId:s}=Gr();return(0,_r.jsx)(Or,{ref:a,className:g(t&&"text-destructive",e),htmlFor:s,...r})}));Qr.displayName="FormLabel";var Wr=Tr.forwardRef((({...e},r)=>{let{error:a,formItemId:t,formDescriptionId:s,formMessageId:i}=Gr();return(0,_r.jsx)(zr.Slot,{ref:r,id:t,"aria-describedby":a?`${s} ${i}`:`${s}`,"aria-invalid":!!a,...e})}));Wr.displayName="FormControl";var Xr=Tr.forwardRef((({className:e,...r},a)=>{let{formDescriptionId:t}=Gr();return(0,_r.jsx)("p",{ref:a,id:t,className:g("text-[0.8rem] text-muted-foreground",e),...r})}));Xr.displayName="FormDescription";var Jr=Tr.forwardRef((({className:e,children:r,...a},t)=>{let{error:s,formMessageId:i}=Gr(),l=s?String(s?.message):r;return l?(0,_r.jsx)("p",{ref:t,id:i,className:g("text-[0.8rem] font-medium text-destructive",e),...a,children:l}):null}));Jr.displayName="FormMessage";var Yr=c(require("react")),Kr=require("react/jsx-runtime"),Zr=Yr.forwardRef((({className:e,type:r,...a},t)=>(0,Kr.jsx)("input",{type:r,className:g("flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",e),ref:t,...a})));Zr.displayName="Input";var ea=c(require("react")),ra=c(require("@radix-ui/react-popover")),aa=require("react/jsx-runtime"),ta=ra.Root,sa=ra.Trigger,ia=ra.Anchor,la=ea.forwardRef((({className:e,align:r="center",sideOffset:a=4,...t},s)=>(0,aa.jsx)(ra.Portal,{children:(0,aa.jsx)(ra.Content,{ref:s,align:r,sideOffset:a,className:g("z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",e),...t})})));la.displayName=ra.Content.displayName;var oa=require("@radix-ui/react-icons"),na=c(require("react-resizable-panels")),da=require("react/jsx-runtime"),ca=o((({className:e,...r})=>(0,da.jsx)(na.PanelGroup,{className:g("flex h-full w-full data-[panel-group-direction=vertical]:flex-col",e),...r})),"ResizablePanelGroup"),ua=na.Panel,ma=o((({withHandle:e,className:r,...a})=>(0,da.jsx)(na.PanelResizeHandle,{className:g("relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",r),...a,children:e&&(0,da.jsx)("div",{className:"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border",children:(0,da.jsx)(oa.DragHandleDots2Icon,{className:"h-2.5 w-2.5"})})})),"ResizableHandle"),xa=c(require("react")),fa=c(require("@radix-ui/react-scroll-area")),pa=require("react/jsx-runtime"),ha=xa.forwardRef((({className:e,children:r,...a},t)=>(0,pa.jsxs)(fa.Root,{ref:t,className:g("relative overflow-hidden",e),...a,children:[(0,pa.jsx)(fa.Viewport,{className:"h-full w-full rounded-[inherit]",children:r}),(0,pa.jsx)(ga,{}),(0,pa.jsx)(fa.Corner,{})]})));ha.displayName=fa.Root.displayName;var ga=xa.forwardRef((({className:e,orientation:r="vertical",...a},t)=>(0,pa.jsx)(fa.ScrollAreaScrollbar,{ref:t,orientation:r,className:g("flex touch-none select-none transition-colors","vertical"===r&&"h-full w-2.5 border-l border-l-transparent p-[1px]","horizontal"===r&&"h-2.5 flex-col border-t border-t-transparent p-[1px]",e),...a,children:(0,pa.jsx)(fa.ScrollAreaThumb,{className:"relative flex-1 rounded-full bg-border"})})));ga.displayName=fa.ScrollAreaScrollbar.displayName;var ja=c(require("react")),ba=require("@radix-ui/react-icons"),va=c(require("@radix-ui/react-select")),Na=require("react/jsx-runtime"),ya=va.Root,wa=va.Group,Ca=va.Value,qa=ja.forwardRef((({className:e,children:r,...a},t)=>(0,Na.jsxs)(va.Trigger,{ref:t,className:g("flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",e),...a,children:[r,(0,Na.jsx)(va.Icon,{asChild:!0,children:(0,Na.jsx)(ba.CaretSortIcon,{className:"h-4 w-4 opacity-50"})})]})));qa.displayName=va.Trigger.displayName;var Sa=ja.forwardRef((({className:e,...r},a)=>(0,Na.jsx)(va.ScrollUpButton,{ref:a,className:g("flex cursor-default items-center justify-center py-1",e),...r,children:(0,Na.jsx)(ba.ChevronUpIcon,{})})));Sa.displayName=va.ScrollUpButton.displayName;var ka=ja.forwardRef((({className:e,...r},a)=>(0,Na.jsx)(va.ScrollDownButton,{ref:a,className:g("flex cursor-default items-center justify-center py-1",e),...r,children:(0,Na.jsx)(ba.ChevronDownIcon,{})})));ka.displayName=va.ScrollDownButton.displayName;var Ra=ja.forwardRef((({className:e,children:r,position:a="popper",...t},s)=>(0,Na.jsx)(va.Portal,{children:(0,Na.jsxs)(va.Content,{ref:s,className:g("relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2","popper"===a&&"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",e),position:a,...t,children:[(0,Na.jsx)(Sa,{}),(0,Na.jsx)(va.Viewport,{className:g("p-1","popper"===a&&"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"),children:r}),(0,Na.jsx)(ka,{})]})})));Ra.displayName=va.Content.displayName;var Da=ja.forwardRef((({className:e,...r},a)=>(0,Na.jsx)(va.Label,{ref:a,className:g("px-2 py-1.5 text-sm font-semibold",e),...r})));Da.displayName=va.Label.displayName;var Ia=ja.forwardRef((({className:e,children:r,...a},t)=>(0,Na.jsxs)(va.Item,{ref:t,className:g("relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",e),...a,children:[(0,Na.jsx)("span",{className:"absolute right-2 flex h-3.5 w-3.5 items-center justify-center",children:(0,Na.jsx)(va.ItemIndicator,{children:(0,Na.jsx)(ba.CheckIcon,{className:"h-4 w-4"})})}),(0,Na.jsx)(va.ItemText,{children:r})]})));Ia.displayName=va.Item.displayName;var Ta=ja.forwardRef((({className:e,...r},a)=>(0,Na.jsx)(va.Separator,{ref:a,className:g("-mx-1 my-1 h-px bg-muted",e),...r})));Ta.displayName=va.Separator.displayName;var za=c(require("react")),Ba=c(require("@radix-ui/react-separator")),Fa=require("react/jsx-runtime"),Pa=za.forwardRef((({className:e,orientation:r="horizontal",decorative:a=!0,...t},s)=>(0,Fa.jsx)(Ba.Root,{ref:s,decorative:a,orientation:r,className:g("shrink-0 bg-border","horizontal"===r?"h-[1px] w-full":"h-full w-[1px]",e),...t})));Pa.displayName=Ba.Root.displayName;var La=require("next-themes"),Aa=require("sonner"),Ma=require("react/jsx-runtime"),Oa=o((({...e})=>{let{theme:r="system"}=(0,La.useTheme)();return(0,Ma.jsx)(Aa.Toaster,{theme:r,className:"toaster group",toastOptions:{classNames:{toast:"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",description:"group-[.toast]:text-muted-foreground",actionButton:"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",cancelButton:"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground"}},...e})}),"Toaster"),_a=c(require("react")),Ea=require("react/jsx-runtime"),Va=_a.forwardRef((({className:e,...r},a)=>(0,Ea.jsx)("div",{className:"relative w-full overflow-auto",children:(0,Ea.jsx)("table",{ref:a,className:g("w-full caption-bottom text-sm",e),...r})})));Va.displayName="Table";var Ha=_a.forwardRef((({className:e,...r},a)=>(0,Ea.jsx)("thead",{ref:a,className:g("[&_tr]:border-b",e),...r})));Ha.displayName="TableHeader";var Ga=_a.forwardRef((({className:e,...r},a)=>(0,Ea.jsx)("tbody",{ref:a,className:g("[&_tr:last-child]:border-0",e),...r})));Ga.displayName="TableBody";var Ua=_a.forwardRef((({className:e,...r},a)=>(0,Ea.jsx)("tfoot",{ref:a,className:g("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",e),...r})));Ua.displayName="TableFooter";var $a=_a.forwardRef((({className:e,...r},a)=>(0,Ea.jsx)("tr",{ref:a,className:g("border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",e),...r})));$a.displayName="TableRow";var Qa=_a.forwardRef((({className:e,...r},a)=>(0,Ea.jsx)("th",{ref:a,className:g("h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",e),...r})));Qa.displayName="TableHead";var Wa=_a.forwardRef((({className:e,...r},a)=>(0,Ea.jsx)("td",{ref:a,className:g("p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",e),...r})));Wa.displayName="TableCell";var Xa=_a.forwardRef((({className:e,...r},a)=>(0,Ea.jsx)("caption",{ref:a,className:g("mt-4 text-sm text-muted-foreground",e),...r})));Xa.displayName="TableCaption";var Ja=c(require("react")),Ya=require("react/jsx-runtime"),Ka=Ja.forwardRef((({className:e,...r},a)=>(0,Ya.jsx)("textarea",{className:g("flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",e),ref:a,...r})));Ka.displayName="Textarea";var Za=c(require("react")),et=c(require("@radix-ui/react-tooltip")),rt=require("react/jsx-runtime"),at=et.Provider,tt=et.Root,st=et.Trigger,it=Za.forwardRef((({className:e,sideOffset:r=4,...a},t)=>(0,rt.jsx)(et.Content,{ref:t,sideOffset:r,className:g("z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",e),...a})));it.displayName=et.Content.displayName;var lt=require("react"),ot=require("react/jsx-runtime"),nt=(0,lt.forwardRef)((({...e},r)=>{let[a,t]=(0,lt.useState)(!1),s=o((()=>"object"==typeof e.value&&"id"in e.value?e.value.id:e.value),"value");return(0,ot.jsxs)(ta,{open:a,onOpenChange:t,children:[(0,ot.jsx)(sa,{asChild:!0,children:(0,ot.jsx)(Wr,{children:(0,ot.jsxs)(C,{disabled:e.disabled,variant:"outline",role:"combobox","aria-expanded":a,className:g("w-full sm:w-[250px] flex justify-between",!s()&&"text-muted-foreground"),children:[s()?e.options?.find((e=>e.value===s()))?.label:e.placeholder??"Select",(0,ot.jsx)(ae.CaretSortIcon,{className:"ml-2 h-4 w-4 shrink-0 opacity-50"})]})})}),(0,ot.jsx)(la,{className:"w-full max-w-full sm:w-[250px] p-0",children:(0,ot.jsxs)(tr,{className:"rounded-lg border shadow-md",ref:r,children:[(0,ot.jsx)(ir,{placeholder:"Type a command or search..."}),(0,ot.jsxs)(lr,{children:[(0,ot.jsx)(or,{children:"No results found."}),(0,ot.jsx)(nr,{heading:"Suggestions",children:(0,ot.jsx)(ha,{className:"max-h-52 overflow-y-auto",children:e.options?.map((r=>(0,ot.jsxs)(cr,{value:r.label,onSelect:()=>{e.onChange?.(r.value),t(!1)},children:[r.label,(0,ot.jsx)(ae.CheckIcon,{className:g("ml-auto h-4 w-4",r.value===s()?"opacity-100":"opacity-0")})]},r.value)))})})]})]})})]})}));nt.displayName="Combobox";var dt=require("lucide-react"),ct=require("react"),ut=require("react/jsx-runtime"),mt=o((({children:e,title:r="Are you sure?",description:a="This action cannot be undone.",okText:t="Ok",cancelText:s="Cancel",okButtonSize:i="default",cancelButtonSize:l="default",okButtonVariant:o="default",cancelButtonVariant:n="outline",loading:d=!1,okIconSide:c="left",cancelIconSide:u="left",onConfirm:m,okIcon:x,cancelIcon:f,open:p,onOpenChange:h,defaultOpen:g})=>{let j=(0,ct.useMemo)((()=>(0,ct.isValidElement)(f)?f:(0,ut.jsx)(dt.XIcon,{className:"mr-2 h-4 w-4"})),[f]),b=(0,ct.useMemo)((()=>d?(0,ut.jsx)(N,{className:"mr-2"}):(0,ct.isValidElement)(x)?x:(0,ut.jsx)(dt.CheckIcon,{className:"mr-2 h-4 w-4"})),[x,d]);return(0,ut.jsxs)(oe,{open:p,onOpenChange:h,defaultOpen:g,children:[(0,ut.jsx)(ne,{asChild:!0,children:e}),(0,ut.jsxs)(ue,{children:[(0,ut.jsxs)(me,{children:[(0,ut.jsx)(fe,{children:r}),(0,ut.jsx)(pe,{children:a})]}),(0,ut.jsxs)(xe,{children:[(0,ut.jsxs)(ge,{variant:n,size:l,disabled:d,children:["left"===u&&j,s,"right"===u&&j]}),(0,ut.jsxs)(he,{variant:o,size:i,disabled:d,onClick:m,children:["left"===c&&b,t,"right"===c&&b]})]})]})]})}),"ConfirmDialog");mt.displayName="ConfirmDialog";var xt=require("react"),ft=require("react/jsx-runtime"),pt=o((e=>(0,ft.jsx)(Hr,{control:e.control,name:e.name,render:({field:r})=>(0,ft.jsxs)($r,{className:g(e.className,e.isCheckbox?"flex flex-row items-center space-x-3 space-y-0":""),children:[!e.isCheckbox&&(0,ft.jsx)(Qr,{children:e.label}),(0,ft.jsx)(Wr,{children:(0,xt.cloneElement)(e.children,{...r,...e.children.props})}),e.isCheckbox&&(0,ft.jsx)(Qr,{className:"text-sm font-normal",children:e.label}),e.description&&(0,ft.jsx)(Xr,{children:e.description}),(0,ft.jsx)(Jr,{})]})})),"Field"),ht=require("@refinedev/core"),gt=require("react"),jt=require("react/jsx-runtime"),bt=o((({formProps:e,isWatchable:r,saveButtonProps:a,...t})=>{let s=(0,gt.useRef)(!1),{resource:i,action:l}=(0,ht.useParsed)(),o=(0,ht.useRouterType)(),n=(0,ht.useBack)(),{goBack:d}=(0,ht.useNavigation)(),c="list"!==l||typeof l<"u"?"legacy"===o?d:n:void 0;r&&!s.current&&(s.current=!0,t.watch());let u=t.handleSubmit((e=>{t.refineCore.onFinish(t.getValues()).then()}));return(0,jt.jsx)(Er,{...t,children:(0,jt.jsx)("form",{...e,onSubmit:u,children:(0,jt.jsxs)(Re,{className:"border-border/40 shadow-sm",children:[(0,jt.jsx)(ze,{className:"pt-6 space-y-4",children:t.children}),(0,jt.jsxs)(Be,{className:"flex justify-end gap-x-4",children:[(0,jt.jsx)(C,{type:"button",onClick:c,disabled:t.refineCore.formLoading,variant:"outline",children:"Cancel"}),(0,jt.jsx)(os,{type:"submit",loading:t.refineCore.formLoading,...a})]})]})})})}),"Form"),vt=require("@radix-ui/react-icons"),Nt=require("react/jsx-runtime"),yt=o((({align:e="end",setTheme:r})=>(0,Nt.jsxs)(hr,{children:[(0,Nt.jsx)(gr,{asChild:!0,children:(0,Nt.jsxs)(C,{variant:"ghost",size:"icon",children:[(0,Nt.jsx)(vt.SunIcon,{className:"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0"}),(0,Nt.jsx)(vt.MoonIcon,{className:"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100"}),(0,Nt.jsx)("span",{className:"sr-only",children:"Toggle theme"})]})}),(0,Nt.jsxs)(Cr,{align:e,children:[(0,Nt.jsx)(qr,{onClick:()=>r?.("light"),children:"Light"}),(0,Nt.jsx)(qr,{onClick:()=>r?.("dark"),children:"Dark"}),(0,Nt.jsx)(qr,{onClick:()=>r?.("system"),children:"System"})]})]})),"ModeToggle"),wt=require("react/jsx-runtime"),Ct=o((({extra:e,...r})=>(0,wt.jsx)("div",{className:"w-full",children:(0,wt.jsxs)("div",{className:g("flex h-20 items-end lg:justify-between",r.className,!r.breadcrumb&&"h-auto"),children:[(0,wt.jsxs)("div",{className:"min-w-0 flex-1",children:[r.breadcrumb,(0,wt.jsx)("div",{className:"inline-flex flex-row items-center gap-x-4 mt-3",children:(0,wt.jsxs)("div",{className:"inline-flex flex-col",children:[(0,wt.jsx)("h2",{className:"text-2xl font-bold leading-7 text-black dark:text-white sm:truncate sm:text-3xl sm:tracking-tight",children:r.title}),r.subTitle&&(0,wt.jsx)("div",{className:"mt-2 flex items-center text-sm text-gray-300",children:r.subTitle})]})})]}),(0,wt.jsx)("div",{className:"flex lg:ml-4 lg:mt-0",children:e})]})})),"PageHeader"),qt=c(require("react")),St=require("react/jsx-runtime"),kt=(0,qt.forwardRef)((({...e},r)=>{let a=qt.default.useRef(null);return(0,St.jsxs)(ya,{disabled:e.disabled||0===e.options?.length,onValueChange:e.onChange,defaultValue:e.value,value:e.value,children:[(0,St.jsx)(Wr,{children:(0,St.jsx)(qa,{ref:a,children:(0,St.jsx)(Ca,{placeholder:e.placeholder??"Select"})})}),(0,St.jsx)(Ra,{style:{width:a.current?.offsetWidth},ref:r,children:e.options?.map(((e,r)=>(0,St.jsx)(Ia,{value:e.value,children:e.label},r)))})]})}));kt.displayName="Select";var Rt=require("@refinedev/core"),Dt=require("react-use"),It=c(require("react")),Tt=require("react/jsx-runtime"),zt=o((({isCollapsed:e})=>{let{menuItems:r}=(0,Rt.useMenu)(),a=(0,Rt.useResourceParams)(),{pathname:t}=(0,Dt.useLocation)(),s=String(t),i=o((e=>{let r=e.meta?.icon;return It.default.isValidElement(r)?It.default.cloneElement(r,{className:"mr-2 w-4 h-4"}):null}),"GetIcon");return(0,Tt.jsx)("div",{"data-collapsed":e,className:"group flex flex-col gap-4 py-2 justify-between h-[94dvh] xl:h-[84dvh] data-[collapsed=true]:py-2",children:(0,Tt.jsx)("nav",{className:"grid gap-1 px-2 group-[[data-collapsed=true]]:justify-center group-[[data-collapsed=true]]:px-2",children:r.filter((e=>!e.meta?.hide)).map(((r,t)=>{let l=[r.list?.toString(),r.create?.toString(),r.edit?.toString()?.replace(":id",a.id),r.show?.toString()?.replace(":id",a.id)].filter(Boolean),o=l.includes(s)||l.some((e=>e?.startsWith(s)||s.startsWith(e)));return e?(0,Tt.jsxs)(tt,{delayDuration:0,children:[(0,Tt.jsx)(st,{asChild:!0,children:(0,Tt.jsxs)(K,{href:r.list?.toString()??"/#",title:r.meta?.title??r.name,className:g(w({variant:"ghost"}),"justify-start",o?"bg-primary text-primary-foreground hover:bg-primary/80 hover:text-primary-foreground":""),children:[r.meta?.icon,(0,Tt.jsxs)("span",{className:"sr-only",children:[r.meta?.title??r.label," ",r.list?"List":"Create"]})]},t)}),(0,Tt.jsxs)(it,{side:"right",className:"flex items-center gap-4",children:[r.label,r.meta?.label&&(0,Tt.jsx)("span",{className:"ml-auto text-muted-foreground",children:r.meta?.label})]})]},t):(0,Tt.jsxs)(K,{href:r.list?.toString()??"/#",title:r.meta?.title??r.name,className:g(w({variant:"ghost"}),"justify-start",o?"bg-primary text-primary-foreground hover:bg-primary/80 hover:text-primary-foreground":""),children:[i(r),r.meta?.title??r.name]},t)}))})})}),"Sidebar");zt.displayName="Sidebar";var Bt=require("react/jsx-runtime"),Ft=o((({resource:e,recordItemId:r,onSuccess:a,mutationMode:t,confirmTitle:s,confirmDescription:i,successNotification:l,errorNotification:o,hideText:n=!1,accessControl:d,meta:c,dataProviderName:u,confirmOkText:m,confirmCancelText:x,invalidates:f,children:p,...h})=>{let{title:g,label:j,hidden:b,disabled:v,loading:N,confirmTitle:y,confirmOkLabel:w,cancelLabel:q,onConfirm:S}=(0,B.useDeleteButton)({resource:e,id:r,dataProviderName:u,invalidates:f,meta:c,onSuccess:a,mutationMode:t,errorNotification:o,successNotification:l,accessControl:d});return b?null:(0,Bt.jsx)(mt,{okText:m??w,cancelText:x??q,okButtonVariant:"destructive",cancelButtonVariant:"outline",title:s??y,description:i,loading:N,onConfirm:S,children:(0,Bt.jsx)(C,{disabled:v,title:g,loading:N,icon:(0,Bt.jsx)(F.Trash2Icon,{className:"mr-2 w-4 h-4"}),...h,children:!n&&(p??j)})})}),"DeleteButton");Ft.displayName="DeleteButton";var Pt=require("@refinedev/core"),Lt=require("lucide-react"),At=require("react/jsx-runtime"),Mt=o((({resource:e,recordItemId:r,hideText:a=!1,accessControl:t,meta:s,onClick:i,children:l,...o})=>{let{hidden:n,disabled:d,label:c,title:u,LinkComponent:m,to:x}=(0,Pt.useEditButton)({resource:e,id:r,accessControl:t,meta:s});return n?null:(0,At.jsx)(m,{to:x,replace:!1,onClick:e=>{d?e.preventDefault():i&&(e.preventDefault(),i(e))},children:(0,At.jsx)(C,{disabled:d,title:u,icon:(0,At.jsx)(Lt.SquarePenIcon,{className:"mr-2 w-4 h-4"}),...o,children:!a&&(l??c)})})}),"EditButton");Mt.displayName="EditButton";var Ot=require("@radix-ui/react-slot"),_t=require("@refinedev/core"),Et=require("lucide-react"),Vt=require("react/jsx-runtime"),Ht=o((({hideText:e=!1,resource:r,recordItemId:a,accessControl:t,access:s,children:i,...l})=>{let{label:o}=(0,_t.useExportButton)(),n=t?.enabled?_t.CanAccess:Ot.Slot;return t?.hideIfUnauthorized&&t.enabled?null:(0,Vt.jsx)(n,{params:{id:a},resource:r,action:"export",...s,children:(0,Vt.jsx)(C,{icon:(0,Vt.jsx)(Et.ShareIcon,{className:"mr-2 w-4 h-4"}),...l,children:!e&&(i??o)})})}),"ExportButton");Ht.displayName="ExportButton";var Gt=require("@radix-ui/react-slot"),Ut=require("@refinedev/core"),$t=require("lucide-react"),Qt=require("react/jsx-runtime"),Wt=o((({hideText:e=!1,resource:r,onChange:a,accept:t="image/*,application/*",recordItemId:s,accessControl:i,access:l,children:n,...d})=>{let{label:c}=(0,Ut.useImportButton)(),u=i?.enabled?Ut.CanAccess:Gt.Slot,m=o((()=>{let e=document.createElement("input");e.type="file",e.accept=t,e.onchange=r=>{r.target instanceof HTMLInputElement&&(a(Array.from(r.target.files??[])),e.remove())},e.click()}),"onClick");return i?.hideIfUnauthorized&&i.enabled?null:(0,Qt.jsx)(u,{params:{id:s},resource:r,action:"import",...l,children:(0,Qt.jsx)(C,{onClick:m,icon:(0,Qt.jsx)($t.ImportIcon,{className:"mr-2 w-4 h-4"}),...d,children:!e&&(n??c)})})}),"ImportButton");Wt.displayName="ImportButton";var Xt=require("@refinedev/core"),Jt=require("lucide-react"),Yt=require("react/jsx-runtime"),Kt=o((({resource:e,hideText:r=!1,accessControl:a,meta:t,children:s,onClick:i,...l})=>{let{hidden:o,disabled:n,label:d,title:c,LinkComponent:u,to:m}=(0,Xt.useListButton)({resource:e,accessControl:a,meta:t});return o?null:(0,Yt.jsx)(u,{to:m,replace:!1,onClick:e=>{n?e.preventDefault():i&&(e.preventDefault(),i(e))},children:(0,Yt.jsx)(C,{disabled:n,title:c,icon:(0,Yt.jsx)(Jt.ListIcon,{className:"mr-2 w-4 h-4"}),...l,children:!r&&(s??d)})})}),"ListButton");Kt.displayName="ListButton";var Zt=require("@refinedev/core"),es=require("lucide-react"),rs=require("react/jsx-runtime"),as=o((({resource:e,recordItemId:r,hideText:a=!1,dataProviderName:t,children:s,...i})=>{let{onClick:l,label:o,loading:n}=(0,Zt.useRefreshButton)({resource:e,id:r,dataProviderName:t});return(0,rs.jsx)(C,{onClick:l,loading:n,icon:(0,rs.jsx)(es.RefreshCwIcon,{className:"mr-2 w-4 h-4"}),...i,children:!a&&(s??o)})}),"RefreshButton");as.displayName="RefreshButton";var ts=require("@radix-ui/react-slot"),ss=require("@refinedev/core"),is=require("lucide-react"),ls=require("react/jsx-runtime"),os=o((({hideText:e=!1,children:r,accessControl:a,access:t,resource:s,recordItemId:i,...l})=>{let{label:o}=(0,ss.useSaveButton)(),n=a?.enabled?ss.CanAccess:ts.Slot;return a?.hideIfUnauthorized&&a.enabled?null:(0,ls.jsx)(n,{params:{id:i},resource:s,action:"save",...t,children:(0,ls.jsx)(C,{icon:(0,ls.jsx)(is.SaveIcon,{className:"mr-2 w-4 h-4"}),...l,children:!e&&(r??o)})})}),"SaveButton");os.displayName="SaveButton";var ns=require("@refinedev/core"),ds=require("lucide-react"),cs=require("react/jsx-runtime"),us=o((({resource:e,recordItemId:r,hideText:a=!1,accessControl:t,meta:s,children:i,onClick:l,...o})=>{let{to:n,label:d,title:c,hidden:u,disabled:m,LinkComponent:x}=(0,ns.useShowButton)({resource:e,id:r,accessControl:t,meta:s});return u?null:(0,cs.jsx)(x,{to:n,replace:!1,onClick:e=>{m?e.preventDefault():l&&(e.preventDefault(),l(e))},children:(0,cs.jsx)(C,{icon:(0,cs.jsx)(ds.EyeIcon,{className:"mr-2 w-4 h-4"}),title:c,disabled:m,...o,children:!a&&(i??d)})})}),"ShowButton");us.displayName="ShowButton";var ms=require("@refinedev/core"),xs=require("react"),fs=require("react/jsx-runtime"),ps=o((({title:e,resource:r,breadcrumb:a,extra:t,children:s})=>{let i=(0,ms.useTranslate)(),{options:{breadcrumb:l}={}}=(0,ms.useRefineContext)(),o=(0,ms.useUserFriendlyName)(),{resource:n,identifier:d}=(0,ms.useResource)(r),c=typeof a>"u"?l:a;return(0,fs.jsxs)(fs.Fragment,{children:[(0,fs.jsx)(Ct,{title:e??i(`${d}.titles.List`,`Create ${o(n?.meta?.label??n?.options?.label??n?.label??d,"singular")}`),isBack:!0,breadcrumb:(0,xs.isValidElement)(c)?c:(0,fs.jsx)(re,{}),extra:t??(0,fs.jsx)(fs.Fragment,{children:(0,fs.jsx)(Kt,{resource:r})})}),(0,fs.jsx)("div",{className:"pt-4 !mt-0",children:s})]})}),"CreatePage");ps.displayName="CreatePage";var hs=require("@refinedev/core"),gs=require("react"),js=require("react/jsx-runtime"),bs=o((({title:e,resource:r,extra:a,breadcrumb:t,children:s})=>{let i=(0,hs.useTranslate)(),{options:{breadcrumb:l}={}}=(0,hs.useRefineContext)(),o=(0,hs.useUserFriendlyName)(),{resource:n,identifier:d}=(0,hs.useResource)(r),c=typeof t>"u"?l:t;return(0,js.jsxs)(js.Fragment,{children:[(0,js.jsx)(Ct,{title:e??i(`${d}.titles.List`,`Edit ${o(n?.meta?.label??n?.options?.label??n?.label??d,"plural")}`),isBack:!0,breadcrumb:(0,gs.isValidElement)(c)?c:(0,js.jsx)(re,{}),extra:a??(0,js.jsxs)("div",{className:"inline-flex flex-row items-center gap-x-2",children:[(0,js.jsx)(us,{resource:r}),(0,js.jsx)(Ft,{resource:r})]})}),(0,js.jsx)("div",{className:"pt-4",children:s})]})}),"EditPage");bs.displayName="EditPage";var vs=require("@refinedev/core"),Ns=require("react"),ys=require("react/jsx-runtime"),ws=o((({title:e,resource:r,breadcrumb:a,createButtonProps:t,className:s,isCreate:i=!0,extra:l,children:o})=>{let n=(0,vs.useTranslate)(),{options:{breadcrumb:d}={}}=(0,vs.useRefineContext)(),c=(0,vs.useUserFriendlyName)(),{resource:u,identifier:m}=(0,vs.useResource)(r),x=typeof a>"u"?d:a;return(0,ys.jsxs)(ys.Fragment,{children:[(0,ys.jsx)(Ct,{title:e??n(`${m}.titles.List`,`List ${c(u?.meta?.label??u?.options?.label??u?.label??m,"plural")}`),breadcrumb:(0,Ns.isValidElement)(x)?x:(0,ys.jsx)(re,{}),extra:l??(0,ys.jsx)(ys.Fragment,{children:(0,ys.jsx)("div",{className:"inline-flex flex-row gap-4",children:i&&(0,ys.jsx)(z,{...t,resource:t?.resource??m})})})}),(0,ys.jsx)("div",{className:g("pt-2 sm:pt-4 !mt-0",s),children:o})]})}),"ListPage");ws.displayName="ListPage";var Cs=require("@refinedev/core"),qs=require("react"),Ss=require("react/jsx-runtime"),ks=o((({title:e,children:r})=>(0,Ss.jsx)(Ss.Fragment,{children:(0,Ss.jsx)("dl",{className:"flex flex-wrap",children:(0,Ss.jsxs)("div",{className:"flex-auto pt-4",children:[(0,Ss.jsx)("dt",{className:"scroll-m-20 text-xs font-semibold tracking-tight",children:e}),(0,Ss.jsx)("dd",{className:"mt-1 text-base font-normal text-foreground leading-7",children:r})]})})})),"Row"),Rs=require("react/jsx-runtime"),Ds=o((({title:e,resource:r,breadcrumb:a,isEdit:t=!0,isDelete:s=!0,extra:i,children:l})=>{let o=(0,Cs.useTranslate)(),{options:{breadcrumb:n}={}}=(0,Cs.useRefineContext)(),d=(0,Cs.useUserFriendlyName)(),{resource:c,identifier:u}=(0,Cs.useResource)(r),m=typeof a>"u"?n:a;return(0,Rs.jsxs)(Rs.Fragment,{children:[(0,Rs.jsx)(Ct,{title:e??o(`${u}.titles.List`,`Show ${d(c?.meta?.label??c?.options?.label??c?.label??u,"singular")}`),breadcrumb:(0,qs.isValidElement)(m)?m:(0,Rs.jsx)(re,{}),isBack:!0,extra:i??(0,Rs.jsxs)("div",{className:"inline-flex items-center gap-x-2",children:[t&&(0,Rs.jsx)(Mt,{resource:r}),s&&(0,Rs.jsx)(Ft,{resource:r})]})}),(0,Rs.jsx)("div",{className:"relative pt-4 !mt-0",children:l})]})}),"ShowPage");Ds.Row=ks,Ds.displayName="ShowPage";var Is=c(require("react"));function Ts(e,r){if(r===e)return!1;let a=Object.values(r),t=Object.values(e);if(a.length!==t.length||a.some(((e,r)=>e!==t[r])))return!0;let s=Object.keys(e);return Object.keys(r).some(((e,r)=>e!==s[r]))}function zs(e,r){return e.matches[r]=!1,e.mediaQueries[r]={},e}function Bs(e){let r=Object.keys(e);return typeof window>"u"?r.reduce(zs,{mediaQueries:{},matches:{}}):r.reduce(((r,a)=>{let t=window.matchMedia(e[a]);return r.mediaQueries[a]=t,r.matches[a]=t.matches,r}),{mediaQueries:{},matches:{}})}function Fs(e,r){function a(r,a){return r[a]=e.mediaQueries[a].matches,r}switch(o(a,"_ref2"),r.type){case"updateMatches":return{matches:Object.keys(e.mediaQueries).reduce(a,{}),mediaQueries:e.mediaQueries};case"setQueries":return Bs(r.queries)}}function Ps(e){let r=Is.useRef(e),[a,t]=Is.useReducer(Fs,e,Bs);function s(){return t({type:"updateMatches"})}function i(e){let r=s;return typeof e.addListener<"u"?e.addListener(r):e.addEventListener("change",r),r}Is.useEffect((()=>{Ts(e,r.current)&&(t({type:"setQueries",queries:e}),r.current=e)}),[e]),o(s,"_ref3"),o(i,"_ref4"),Is.useEffect((()=>{let e=Object.values(a.mediaQueries),r=e.map(i);function t(e,a){typeof e.addListener<"u"?e.removeListener(r[a]):e.removeEventListener("change",r[a])}return o(t,"_ref5"),()=>{e.forEach(t)}}),[a.mediaQueries]);let{matches:l}=a,n=Is.useMemo((()=>Object.values(l)),[l]);return{matches:l,matchesAny:n.some(Boolean),matchesAll:n.length>0&&n.every(Boolean)}}function Ls(e){return Ps(Ms(e)).matchesAll}o(Ts,"queriesDidChange"),o(zs,"_ref"),o(Bs,"init"),o(Fs,"reducer"),o(Ps,"useMediaQueries"),o(Ls,"useMediaQuery");var As={};function Ms(e){return void 0===As[e]&&(As[e]={default:e}),As[e]}o(Ms,"getObj");var Os=require("react"),_s=require("@refinedev/core"),Es=require("react/jsx-runtime"),Vs=o((({children:e,defaultLayout:r,defaultCollapsed:a=!1,navCollapsedSize:t,modeToggle:s,navbar:i,logo:l})=>{let{resources:o}=(0,_s.useResource)(),n=o?.[0],d=Ls("only screen and (max-width: 579.999px)"),c=Ls("only screen and (min-width: 640px) and (max-width: 767.999px)"),u=Ls("only screen and (min-width: 768px) and (max-width: 1023.999px)"),m=Ls("only screen and (min-width: 1024px)");console.log([d,c,u,m]);let[x,f]=(0,Os.useState)(d??a),p=(0,Os.useMemo)((()=>r||(d?[15,85]:c?[20,80]:u?[25,75]:[15,85])),[r,d,c,u]),h=(0,Os.useMemo)((()=>m?{minSize:11,maxSize:15}:u?{minSize:15,maxSize:25}:c?{minSize:20,maxSize:30}:{minSize:15,maxSize:15}),[c,u,m]),j=(0,Os.useMemo)((()=>x||d||c||u),[x,u,c,d]),b=(0,Os.useMemo)((()=>{if(!l)return null;if(!j&&(0,Os.isValidElement)(l.default))return(0,Os.cloneElement)(l.default,{className:"w-auto h-8"});let e=j?l.collapsed:l.default;return(0,Os.isValidElement)(e)?(0,Os.cloneElement)(e,{className:"w-auto h-8"}):null}),[l,r,j]);return(0,Es.jsxs)(Es.Fragment,{children:[(0,Es.jsx)(at,{delayDuration:0,children:(0,Es.jsxs)(ca,{direction:"horizontal",onLayout:e=>{document.cookie=`react-resizable-panels:layout=${JSON.stringify(e)}`},className:"h-full items-stretch",children:[(0,Es.jsxs)(ua,{defaultSize:p[0],collapsedSize:t,collapsible:!0,minSize:h.minSize,maxSize:h.maxSize,onExpand:()=>{let e=d;f(e),document.cookie=`react-resizable-panels:collapsed=${JSON.stringify(e)}`},onCollapse:()=>{f(!0),document.cookie=`react-resizable-panels:collapsed=${JSON.stringify(!0)}`},className:g(j&&"min-w-[50px] transition-all duration-300 ease-in-out"),children:[(0,Es.jsx)("div",{className:g("flex h-14 items-center border-b border-border/40 justify-center",j?"h-14":"px-2"),children:(0,Es.jsx)(K,{href:n.list?.toString()??"/",title:n.meta?.label??n.name,children:b})}),(0,Es.jsx)(zt,{isCollapsed:j})]}),(0,Es.jsx)(ma,{withHandle:!0,className:"bg-border/40"}),(0,Es.jsxs)(ua,{defaultSize:p[1],minSize:25,className:"xl:max-h-dvh h-full !overflow-y-auto overflow-x-hidden",children:[(0,Es.jsxs)("header",{className:g("sticky top-0 z-50 h-14 px-4 flex justify-end items-center border-b border-border/40 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60",i?.rightSide&&"justify-between"),children:[i?.leftSide&&(0,Es.jsx)("div",{className:"flex items-center justify-start flex-1",children:i?.leftSide}),i?.rightSide?(0,Es.jsxs)("div",{className:"flex items-center justify-end flex-1",children:[s&&(0,Es.jsx)(yt,{...s}),i?.rightSide]}):s&&(0,Es.jsx)(yt,{...s})]}),(0,Es.jsx)("main",{className:"px-6 py-4",children:e})]})]})}),(0,Es.jsx)(Oa,{})]})}),"DefaultLayout");Vs.displayName="DefaultLayout";var Hs=require("sonner"),Gs={open:o((({key:e,message:r,description:a,type:t})=>{"success"===t&&Hs.toast.success(r,{description:a,id:e}),"error"===t&&Hs.toast.error(r,{description:a,id:e}),"progress"===t&&Hs.toast.loading(r,{description:a,id:e})}),"open"),close:o((e=>Hs.toast.dismiss(e)),"close")},Us=o((()=>Gs),"useNotificationProvider"),$s=require("@refinedev/core"),Qs=require("react"),Ws=o(((e,r,a)=>{let t=(0,Qs.useContext)($s.AccessControlContext),s=t.options.buttons.enableAccessControl,i=t.options.buttons.hideIfUnauthorized,{editUrl:l}=(0,$s.useNavigation)(),{id:n,resource:d}=(0,$s.useResource)(e),{data:c}=(0,$s.useCan)({resource:e,action:"edit",params:{id:r,resource:d},queryOptions:{enabled:s}}),u=(0,$s.useTranslate)(),m=o((()=>c?.can?"":c?.reason?c.reason:u("buttons.notAccessTitle","You don't have permission to access")),"reason"),x=e&&(r??n)?l(e,r??n,a):"";return{can:!(s&&i&&!c?.can),reason:m(),url:x}}),"useGetEditUrl"),Xs=require("@refinedev/core"),Js=require("react"),Ys=o(((e,r,a)=>{let t=(0,Js.useContext)(Xs.AccessControlContext),s=t.options.buttons.enableAccessControl,i=t.options.buttons.hideIfUnauthorized,{showUrl:l}=(0,Xs.useNavigation)(),{id:n,resource:d}=(0,Xs.useResource)(e),{data:c}=(0,Xs.useCan)({resource:e,action:"show",params:{id:r,resource:d},queryOptions:{enabled:s}}),u=(0,Xs.useTranslate)(),m=o((()=>c?.can?"":c?.reason?c.reason:u("buttons.notAccessTitle","You don't have permission to access")),"reason"),x=e&&(r||n)?l(e,r??n,a):"";return{can:!(s&&i&&!c?.can),reason:m(),url:x}}),"useGetShowUrl"),Ks=require("@refinedev/core"),Zs=require("react"),ei=o(((e,r,a)=>{let t=(0,Zs.useContext)(Ks.AccessControlContext),s=t.options.buttons.enableAccessControl,i=t.options.buttons.hideIfUnauthorized,l=(0,Ks.useTranslate)(),n=(0,Ks.useResourceParams)(),{resource:d,identifier:c}=(0,Ks.useResource)(e),{mutationMode:u}=(0,Ks.useMutationMode)(),{mutate:m,isLoading:x}=(0,Ks.useDelete)(),{data:f}=(0,Ks.useCan)({resource:d?.name,action:"delete",params:{id:r??n,resource:d},queryOptions:{enabled:s}}),p=o((()=>f?.can?"":f?.reason?f.reason:l("You don't have permission to access")),"reason"),{setWarnWhen:h}=(0,Ks.useWarnAboutChange)(),g=o((e=>{if((!s||!i||f?.can)&&(r??n)&&c)return h(!1),m({id:r??n??"",resource:c,mutationMode:u,meta:(0,Ks.pickNotDeprecated)(a),metaData:(0,Ks.pickNotDeprecated)(a)},e)}),"onDeleteMutate");return{can:!(s&&i&&!f?.can),reason:p(),mutate:g,isLoading:x}}),"useDeleteHelper"),ri=require("@refinedev/core"),ai=o((()=>{let e=(0,ri.useRouterType)(),r=(0,ri.useBack)(),{goBack:a}=(0,ri.useNavigation)(),{action:t}=(0,ri.useResource)();return"list"!==t||typeof t<"u"?"legacy"===e?a:r:void 0}),"useOnBack"),ti=require("@refinedev/core"),si=require("react"),ii=require("react/jsx-runtime");function li(e){let r=ai(),{can:a,isLoading:t,mutate:s}=ei(e.data?.resource,e.data?.row?.id),i=(0,ti.useTranslate)(),l=(0,si.useCallback)((()=>{if(a)return s({onSuccess(){let a=e?.data?.redirectBack??!1,t=e?.data?.onAfterHandle;e?.updateData({toogle:!1,row:void 0,resource:"",redirectBack:!1,onAfterHandle:void 0}),a&&r?.(),t&&t()}})}),[a,s,e,r]);return(0,ii.jsx)(mt,{open:a&&e?.data?.toogle,loading:t,title:i("Are you sure?"),description:i("This action cannot be undone."),okText:i("Delete"),cancelText:i("Cancel"),okButtonVariant:"destructive",onOpenChange:()=>{t||e?.updateData({toogle:!1,row:void 0,resource:""})},onConfirm:l})}o(li,"DeleteActionModal");var oi=(0,si.createContext)(void 0),ni=o((({children:e})=>{let[r,a]=(0,si.useState)({row:void 0,resource:"",toogle:!1,onAfterHandle:void 0}),t=o((e=>{a(e)}),"updateData");return(0,ii.jsxs)(oi.Provider,{value:{data:r,updateData:t},children:[e,(0,ii.jsx)(li,{data:r,updateData:t})]})}),"DeleteProvider"),di=require("react"),ci=require("react/jsx-runtime"),ui=(0,di.forwardRef)((({className:e,...r},a)=>(0,ci.jsxs)("svg",{ref:a,xmlns:"http://www.w3.org/2000/svg",className:g("mx-auto inline",e),viewBox:"0 0 120 30",fill:"currentColor",...r,children:[(0,ci.jsxs)("circle",{cx:"15",cy:"15",r:"15",children:[(0,ci.jsx)("animate",{attributeName:"r",begin:"0s",calcMode:"linear",dur:"0.8s",from:"15",repeatCount:"indefinite",to:"15",values:"15;9;15"}),(0,ci.jsx)("animate",{attributeName:"fill-opacity",begin:"0s",calcMode:"linear",dur:"0.8s",from:"1",repeatCount:"indefinite",to:"1",values:"1;.5;1"})]}),(0,ci.jsxs)("circle",{cx:"60",cy:"15",r:"9",fillOpacity:"0.3",children:[(0,ci.jsx)("animate",{attributeName:"r",begin:"0s",calcMode:"linear",dur:"0.8s",from:"9",repeatCount:"indefinite",to:"9",values:"9;15;9"}),(0,ci.jsx)("animate",{attributeName:"fill-opacity",begin:"0s",calcMode:"linear",dur:"0.8s",from:"0.5",repeatCount:"indefinite",to:"0.5",values:".5;1;.5"})]}),(0,ci.jsxs)("circle",{cx:"105",cy:"15",r:"15",children:[(0,ci.jsx)("animate",{attributeName:"r",begin:"0s",calcMode:"linear",dur:"0.8s",from:"15",repeatCount:"indefinite",to:"15",values:"15;9;15"}),(0,ci.jsx)("animate",{attributeName:"fill-opacity",begin:"0s",calcMode:"linear",dur:"0.8s",from:"1",repeatCount:"indefinite",to:"1",values:"1;.5;1"})]})]}))),mi=ui,xi=require("@refinedev/react-table"),fi=require("@tanstack/react-table"),pi=require("react"),hi=require("@radix-ui/react-icons"),gi=require("react/jsx-runtime"),ji=o((e=>(0,gi.jsx)(qr,{disabled:e.disabled,asChild:!(!e.to||!e.to&&!e.children),onClick:e.onClick,children:e.asChild?e.children:e.to?(0,gi.jsxs)(K,{href:e.to,title:e.title,children:[e.icon?(0,gi.jsx)("span",{className:"mr-2",children:e.icon}):null,e.title]}):(0,gi.jsxs)(gi.Fragment,{children:[e.icon?(0,gi.jsx)("span",{className:"mr-2",children:e.icon}):null,e.title]})})),"RowAction");function bi({children:e}){return(0,gi.jsxs)(hr,{children:[(0,gi.jsx)(gr,{asChild:!0,children:(0,gi.jsxs)(C,{variant:"ghost",size:"icon",children:[(0,gi.jsx)(hi.DotsHorizontalIcon,{className:"h-4 w-4"}),(0,gi.jsx)("span",{className:"sr-only",children:"Open menu"})]})}),(0,gi.jsx)(Cr,{align:"end",className:"w-[160px]",children:e})]})}ji.displayName="RowAction",o(bi,"RowActions");var vi=require("react/jsx-runtime");function Ni({row:e,resource:r,title:a,disabled:t,...s}){let i=Ws(r,e.id);return(0,vi.jsx)(ji,{...s,disabled:!i.can||t,title:i?.can?a:i?.reason,to:i.url})}o(Ni,"EditAction"),Ni.displayName="EditAction";var yi=require("react/jsx-runtime");function wi({row:e,resource:r,title:a,disabled:t,...s}){let i=Ys(r,e.id);return(0,yi.jsx)(ji,{...s,disabled:!i.can||t,title:i?.can?a:i?.reason,to:i.url})}o(wi,"ShowAction"),wi.displayName="ShowAction";var Ci=require("date-fns"),qi=require("lucide-react"),Si=require("react"),ki=require("react/jsx-runtime");function Ri({column:e,title:r,numberOfMonths:a=2,align:t="start"}){let[s,i]=(0,Si.useState)({from:void 0,to:void 0}),l=new Set(e?.getFilterValue());return(0,Si.useEffect)((()=>{if(s){let r=Object.values(s).filter(Boolean);r.length&&e?.setFilterValue(r.map((e=>e?(0,Ci.format)(e,"yyyy-MM-dd").toString():"")))}}),[e,s]),(0,ki.jsxs)(ta,{children:[(0,ki.jsx)(sa,{asChild:!0,children:(0,ki.jsxs)("div",{className:"inline-flex flex-row items-center gap-x-0.5",children:[(0,ki.jsxs)(C,{title:r,variant:"outline",size:"sm",className:"h-5 border-dashed px-1 py-2.5",children:[(0,ki.jsx)(qi.FilterIcon,{className:g("h-3.5 w-3.5")}),s?.from?(0,ki.jsxs)(ki.Fragment,{children:[(0,ki.jsx)(Pa,{orientation:"vertical",className:"mx-2 h-4"}),(0,ki.jsx)(Ne,{variant:"secondary",className:"rounded-sm p-1 h-3.5 text-xs font-normal",children:s.to?(0,ki.jsx)(ki.Fragment,{children:[(0,Ci.format)(s.from,"LLL dd, y"),(0,Ci.format)(s.to,"LLL dd, y")].join(" ")}):(0,Ci.format)(s.from,"LLL dd, y")})]}):null]}),l.size>0&&(0,ki.jsx)(C,{variant:"outline",size:"sm",className:"h-5 border-dashed px-1 py-2.5",onClick:r=>{r.preventDefault(),e?.setFilterValue(void 0),i({from:void 0,to:void 0})},children:(0,ki.jsx)(qi.FilterX,{className:g("h-3.5 w-3.5")})})]})}),(0,ki.jsxs)(la,{className:"w-auto p-0",align:t,children:[(0,ki.jsx)(qe,{initialFocus:!0,mode:"range",defaultMonth:new Date,selected:s,onSelect:i,numberOfMonths:a}),l.size>0&&(0,ki.jsxs)(ki.Fragment,{children:[(0,ki.jsx)(Pa,{}),(0,ki.jsx)("div",{className:"flex flex-row items-center justify-center py-3",children:(0,ki.jsxs)(C,{variant:"outline",size:"sm",className:"h-8 border-dashed px-2",onClick:()=>{e?.setFilterValue(void 0),i({from:void 0,to:void 0})},children:[(0,ki.jsx)(qi.FilterX,{size:16,className:"mr-2"}),"Clear"]})})]})]})]})}o(Ri,"TableFilterDateRangePickerFilter");var Di=require("@radix-ui/react-icons"),Ii=require("lucide-react"),Ti=require("react/jsx-runtime");function zi({column:e,title:r,options:a,align:t="start"}){let s=e?.getFacetedUniqueValues(),i=new Set(e?.getFilterValue());return(0,Ti.jsxs)(ta,{children:[(0,Ti.jsx)(sa,{asChild:!0,children:(0,Ti.jsxs)("div",{className:"inline-flex flex-row items-center gap-x-0.5",children:[(0,Ti.jsxs)(C,{title:r,variant:"outline",size:"sm",className:"h-5 border-dashed px-1 py-2.5",children:[(0,Ti.jsx)(Ii.FilterIcon,{className:g("h-3.5 w-3.5")}),i?.size>0&&(0,Ti.jsxs)(Ti.Fragment,{children:[(0,Ti.jsx)(Pa,{orientation:"vertical",className:"mx-2 h-4"}),(0,Ti.jsx)(Ne,{variant:"secondary",className:"rounded-sm p-1 h-3.5 text-xs font-normal lg:hidden",children:i.size}),(0,Ti.jsx)("div",{className:"hidden space-x-1 lg:flex",children:i.size>2?(0,Ti.jsxs)(Ne,{variant:"secondary",className:"rounded-sm p-1 text-xs h-3.5 font-normal",children:[i.size," selected"]}):a?.filter((e=>i.has(e.value))).map((e=>(0,Ti.jsx)(Ne,{variant:"secondary",className:"rounded-sm p-1 text-xs h-3.5 font-normal",children:e.label},e.value)))})]})]}),i.size>0&&(0,Ti.jsx)(C,{variant:"outline",size:"sm",className:"h-5 border-dashed px-1 py-2.5",onClick:r=>{r.preventDefault(),e?.setFilterValue(void 0)},children:(0,Ti.jsx)(Ii.FilterX,{className:g("h-3.5 w-3.5")})})]})}),(0,Ti.jsx)(la,{className:"w-[200px] p-0",align:t,children:(0,Ti.jsxs)(tr,{children:[(0,Ti.jsx)(ir,{placeholder:r}),(0,Ti.jsxs)(lr,{children:[(0,Ti.jsx)(or,{children:"No results found."}),(0,Ti.jsx)(nr,{children:a?.map((r=>{let a=i.has(r.value);return(0,Ti.jsxs)(cr,{onSelect:()=>{a?i.delete(r.value):i.add(r.value);let t=Array.from(i);e?.setFilterValue(t.length?t:void 0)},children:[(0,Ti.jsx)("div",{className:g("mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary",a?"bg-primary text-primary-foreground":"opacity-50 [&_svg]:invisible"),children:(0,Ti.jsx)(Di.CheckIcon,{className:g("h-4 w-4")})}),r.icon&&(0,Ti.jsx)(r.icon,{className:"mr-2 h-4 w-4 text-muted-foreground"}),(0,Ti.jsx)("span",{children:r.label}),s?.get(r.value)&&(0,Ti.jsx)("span",{className:"ml-auto flex h-4 w-4 items-center justify-center font-mono text-xs",children:s.get(r.value)})]},r.value)}))}),i.size>0&&(0,Ti.jsxs)(Ti.Fragment,{children:[(0,Ti.jsx)(dr,{}),(0,Ti.jsx)(nr,{children:(0,Ti.jsx)(cr,{onSelect:()=>e?.setFilterValue(void 0),className:"justify-center text-center",children:"Clear filters"})})]})]})]})})]})}o(zi,"TableFilterDropdown");var Bi=require("lucide-react"),Fi=require("react/jsx-runtime");function Pi({column:e,title:r,align:a="start"}){let t=e?.getFilterValue();return(0,Fi.jsxs)(ta,{children:[(0,Fi.jsx)(sa,{asChild:!0,children:(0,Fi.jsx)("div",{className:"inline-flex flex-row items-center gap-x-0.5",children:t?(0,Fi.jsx)(C,{variant:"outline",size:"sm",className:"h-5 border-dashed px-1 py-2.5",onClick:r=>{r.preventDefault(),e?.setFilterValue(void 0)},children:(0,Fi.jsx)(Bi.FilterX,{className:g("h-3.5 w-3.5")})}):(0,Fi.jsx)(C,{title:r,variant:"outline",size:"sm",className:"h-4 border-dashed px-1 py-2.5",children:(0,Fi.jsx)(Bi.FilterIcon,{className:g("h-3.5 w-3.5")})})})}),(0,Fi.jsxs)(la,{className:"w-[200px] p-0",align:a,children:[(0,Fi.jsxs)("div",{className:"flex flex-row items-center px-3 text-popover-foreground bg-popover",children:[(0,Fi.jsx)("svg",{width:"15",height:"15",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",className:"mr-2 h-4 w-4 shrink-0 opacity-50",children:(0,Fi.jsx)("path",{d:"M10 6.5C10 8.433 8.433 10 6.5 10C4.567 10 3 8.433 3 6.5C3 4.567 4.567 3 6.5 3C8.433 3 10 4.567 10 6.5ZM9.30884 10.0159C8.53901 10.6318 7.56251 11 6.5 11C4.01472 11 2 8.98528 2 6.5C2 4.01472 4.01472 2 6.5 2C8.98528 2 11 4.01472 11 6.5C11 7.56251 10.6318 8.53901 10.0159 9.30884L12.8536 12.1464C13.0488 12.3417 13.0488 12.6583 12.8536 12.8536C12.6583 13.0488 12.3417 13.0488 12.1464 12.8536L9.30884 10.0159Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})}),(0,Fi.jsx)(Zr,{value:t??"",defaultValue:t??"",onChange:r=>{e?.setFilterValue(r.target.value)},className:g("h-10 border-0 focus-visible:ring-0 ring-0 shadow-none rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50"),placeholder:r})]}),t&&(0,Fi.jsxs)(la,{children:[(0,Fi.jsx)(Pa,{}),(0,Fi.jsx)("div",{className:"flex flex-row items-center justify-center py-3",children:(0,Fi.jsxs)(C,{variant:"outline",size:"sm",className:"h-8 border-dashed px-2",onClick:()=>{e?.setFilterValue(void 0)},children:[(0,Fi.jsx)(Bi.FilterX,{size:16,className:"mr-2"}),"Clear"]})})]})]})]})}o(Pi,"TableFilterSearchColumn");var Li=require("@radix-ui/react-icons"),Ai=require("react"),Mi=require("react/jsx-runtime"),Oi=(0,Ai.forwardRef)((({table:e,children:r},a)=>(0,Mi.jsxs)(Mi.Fragment,{children:[(0,Mi.jsx)(Me,{ref:a,checked:e.getIsSomeRowsSelected()?"indeterminate":e.getIsAllPageRowsSelected(),onCheckedChange:r=>e.toggleAllPageRowsSelected(!!r),className:"translate-y-[2px]","aria-label":"Select all"}),r&&(0,Mi.jsxs)(hr,{children:[(0,Mi.jsx)(gr,{asChild:!0,children:(0,Mi.jsx)(C,{disabled:!(e.getIsSomeRowsSelected()||e.getIsAllPageRowsSelected()),size:"icon",variant:"ghost",className:"px-0 w-5",children:(0,Mi.jsx)(Li.DotsVerticalIcon,{className:"w-4 h-4"})})}),(0,Mi.jsxs)(Cr,{align:"start",children:[(0,Mi.jsx)(Rr,{children:"Bulk Actions"}),(0,Mi.jsx)(Dr,{}),r]})]})]})));Oi.displayName="CheckAll";var _i=require("@radix-ui/react-icons"),Ei=require("react/jsx-runtime"),Vi=o((({table:e})=>(0,Ei.jsxs)("div",{className:"flex flex-col sm:flex-row gap-y-4 sm-gap-y-0 items-center justify-between",children:[(0,Ei.jsxs)("div",{className:"flex-1 text-sm text-muted-foreground",children:[e.getFilteredSelectedRowModel().rows.length," of"," ",e.getFilteredRowModel().rows.length," row(s) selected."]}),(0,Ei.jsxs)("div",{className:"flex relative flex-col-reverse gap-y-4 sm:gap-y-0 sm:flex-row items-center space-x-6 lg:space-x-8",children:[(0,Ei.jsxs)("div",{className:"flex items-center space-x-2",children:[(0,Ei.jsx)("p",{className:"text-sm font-medium",children:"Rows per page"}),(0,Ei.jsxs)(ya,{value:`${e.getState().pagination.pageSize}`,onValueChange:r=>{e.setPageSize(Number(r))},children:[(0,Ei.jsx)(qa,{className:"h-8 w-[70px]",children:(0,Ei.jsx)(Ca,{placeholder:e.getState().pagination.pageSize})}),(0,Ei.jsx)(Ra,{children:[10,20,30,40,50].map((e=>(0,Ei.jsx)(Ia,{value:`${e}`,children:e},e)))})]})]}),(0,Ei.jsxs)("div",{className:"flex w-fit items-center justify-center text-sm font-medium",children:["Page ",e.getState().pagination.pageIndex+1," of"," ",e.getPageCount()]}),(0,Ei.jsxs)("div",{className:"flex items-center space-x-2",children:[(0,Ei.jsxs)(C,{variant:"outline",className:"hidden h-8 w-8 p-0 lg:flex",onClick:()=>e.setPageIndex(0),disabled:!e.getCanPreviousPage(),children:[(0,Ei.jsx)("span",{className:"sr-only",children:"Go to first page"}),(0,Ei.jsx)(_i.DoubleArrowLeftIcon,{className:"h-4 w-4"})]}),(0,Ei.jsxs)(C,{variant:"outline",className:"h-8 w-8 p-0",onClick:()=>e.previousPage(),disabled:!e.getCanPreviousPage(),children:[(0,Ei.jsx)("span",{className:"sr-only",children:"Go to previous page"}),(0,Ei.jsx)(_i.ChevronLeftIcon,{className:"h-4 w-4"})]}),(0,Ei.jsxs)(C,{variant:"outline",className:"h-8 w-8 p-0",onClick:()=>e.nextPage(),disabled:!e.getCanNextPage(),children:[(0,Ei.jsx)("span",{className:"sr-only",children:"Go to next page"}),(0,Ei.jsx)(_i.ChevronRightIcon,{className:"h-4 w-4"})]}),(0,Ei.jsxs)(C,{variant:"outline",className:"hidden h-8 w-8 p-0 lg:flex",onClick:()=>e.setPageIndex(e.getPageCount()-1),disabled:!e.getCanNextPage(),children:[(0,Ei.jsx)("span",{className:"sr-only",children:"Go to last page"}),(0,Ei.jsx)(_i.DoubleArrowRightIcon,{className:"h-4 w-4"})]})]})]})]})),"Pagination");Vi.displayName="Pagination";var Hi=require("@radix-ui/react-icons"),Gi=require("react/jsx-runtime"),Ui=o((({column:e})=>(0,Gi.jsx)("div",{className:"cursor-pointer",onClick:()=>{e?.toggleSorting("asc"===e?.getIsSorted())},children:(0,Gi.jsxs)("div",{className:"inline-flex flex-col",children:[(0,Gi.jsx)(Hi.CaretUpIcon,{className:g("-mb-1.5 w-5 h-5","asc"===e?.getIsSorted()?"text-foreground":"text-input")}),(0,Gi.jsx)(Hi.CaretDownIcon,{className:g("-mt-1.5 w-5 h-5","desc"===e?.getIsSorted()?"text-foreground":"text-input")})]})})),"SortAction"),$i=require("@radix-ui/react-dropdown-menu"),Qi=require("@radix-ui/react-icons"),Wi=require("react"),Xi=require("react/jsx-runtime"),Ji=o((({table:e})=>{let r=(0,Wi.useMemo)((()=>e.getAllColumns().filter((e=>typeof e.accessorFn<"u"&&e.getCanHide()))),[e]);return(0,Xi.jsxs)(hr,{children:[(0,Xi.jsx)($i.DropdownMenuTrigger,{asChild:!0,children:(0,Xi.jsxs)(C,{variant:"outline",size:"sm",className:"ml-auto hidden h-8 lg:flex",children:[(0,Xi.jsx)(Qi.MixerHorizontalIcon,{className:"mr-2 h-4 w-4"}),"View"]})}),(0,Xi.jsxs)(Cr,{align:"end",className:"w-[150px]",children:[(0,Xi.jsx)(Rr,{children:"Toggle columns"}),(0,Xi.jsx)(Dr,{}),r.map((e=>(0,Xi.jsx)(Sr,{className:"capitalize",checked:e.getIsVisible(),onCheckedChange:r=>e.toggleVisibility(r),children:e.id},e.id)))]})]})}),"DataTableViewOptions");Ji.displayName="DataTableViewOptions";var Yi=require("react/jsx-runtime");function Ki({table:e}){return(0,Yi.jsxs)("div",{className:"flex items-center justify-between",children:[(0,Yi.jsx)("div",{className:"flex flex-1 items-center space-x-2"}),(0,Yi.jsx)(Ji,{table:e})]})}o(Ki,"DataTableToolbar");var Zi=require("react"),el=require("react/jsx-runtime");function rl({row:e,resource:r,title:a,disabled:t,onAfterHandle:s,...i}){let{can:l,reason:o}=ei(r,e.id),n=(0,Zi.useContext)(oi);return(0,el.jsx)(ji,{...i,disabled:!l||t,title:l?a:o,onClick:()=>n?.updateData({row:e,resource:r,toogle:!0,onAfterHandle:s})})}o(rl,"DeleteAction"),rl.displayName="DeleteAction";var al=require("react/jsx-runtime");function tl({children:e,showHeader:r=!0,...a}){let[t,s]=(0,pi.useState)(!1);(0,pi.useEffect)((()=>{let e=new AbortController;return window.addEventListener("deleteRow",(e=>{console.log(e.detail)}),{signal:e.signal}),()=>{e.abort()}}),[]);let i=(0,pi.useCallback)((({id:e,accessorKey:r,header:a,enableSorting:t,enableHiding:s,filter:i,cell:l})=>{let o={id:e,header:a,accessorKey:r,enableSorting:t??!1,enableHiding:s??!1,enableColumnFilter:!0,enableResizing:!0,filter:i};return l&&(o.cell=l),o}),[]),l=(0,pi.useMemo)((()=>Array.isArray(e)?e.map((e=>e.props)).map(i):[]),[e,i]),o=(0,xi.useTable)({columns:l,...a}),n=(0,pi.useMemo)((()=>o.options),[o]),d=(0,pi.useMemo)((()=>!(!n.enableColumnFilters&&!n?.enableFilters)),[n]);return(0,al.jsx)(ni,{children:(0,al.jsxs)("div",{className:"space-y-4",children:[(0,al.jsx)(Ki,{table:o}),(0,al.jsx)("div",{className:"rounded-md border border-border",children:(0,al.jsxs)(Va,{children:[r&&(0,al.jsx)(Ha,{children:o.getHeaderGroups().map((e=>(0,al.jsx)($a,{children:e.headers.map((e=>{let r=e.column.columnDef;return(0,al.jsx)(Qa,{children:(0,al.jsxs)("div",{className:"inline-flex flex-row items-center gap-x-2.5",children:[e.isPlaceholder?null:(0,fi.flexRender)(e.column.columnDef.header,e.getContext()),n.enableSorting&&r.enableSorting&&(0,al.jsx)(Ui,{column:e.column}),d&&r?.filter&&r.filter({column:e.column,title:`${r.header} Filter`})]})},e.id)}))},e.id)))}),(0,al.jsx)(Ga,{children:o.refineCore.tableQuery.isLoading?(0,al.jsx)($a,{children:(0,al.jsx)(Wa,{colSpan:l.length,className:"h-24 text-center text-nowrap",children:(0,al.jsx)("div",{className:"flex items-center justify-center flex-row",children:(0,al.jsx)(mi,{className:"h-4 text-primary"})})})}):o.getRowModel().rows?.length?o.getRowModel().rows.map((e=>(0,al.jsx)($a,{"data-state":e.getIsSelected()&&"selected",children:e.getVisibleCells().map((e=>(0,al.jsx)(Wa,{className:"text-nowrap",children:(0,fi.flexRender)(e.column.columnDef.cell,e.getContext())},e.id)))},e.id))):(0,al.jsx)($a,{children:(0,al.jsx)(Wa,{colSpan:l.length,className:"h-24 text-center",children:"No results."})})})]})}),(0,al.jsx)(Vi,{table:o})]})})}o(tl,"Table");var sl=o((e=>e.children),"TableColumn");tl.Column=sl,tl.CheckAll=Oi,tl.Actions=bi,tl.Action=ji,tl.EditAction=Ni,tl.ShowAction=wi,tl.DeleteAction=rl,tl.Filter={DateRangePicker:Ri,Dropdown:zi,Search:Pi},tl.displayName="Table";//# sourceMappingURL=data:application/json;base64,